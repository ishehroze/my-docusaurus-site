/*
Convert heading text into anchor link, using the algorithm from
https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb
as described in
https://gist.github.com/asabaylus/3071099
 */


var headingToAnchor;

headingToAnchor = function(heading, headings) {
    heading = heading.toLowerCase().replace(/[^\w\- ]/g, '').replace(/[ ]/g, '-');
    if (headings[heading]) {
    heading += "-" + (headings[heading]++);
    } else {
    headings[heading] = 1;
    }
    return heading;
};

module.exports = {
    names: ['github-internal-links'],
    description: 'Check internal links like those generated by Github',
    tags: ['links'],
    "function": function(_arg, onError) {
    var anchor, child, config, heading, headingLineNumber, headings, key, lineNumber, links, name, token, tokens, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    name = _arg.name, tokens = _arg.tokens, config = _arg.config;
    links = [];
    heading = null;
    headings = {};
    for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        token = tokens[_i];
        switch (token.type) {
        case 'inline':
            _ref = token.children;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            child = _ref[_j];
            switch (child.type) {
                case 'link_open':
                _ref1 = child.attrs;
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                    _ref2 = _ref1[_k], key = _ref2[0], value = _ref2[1];
                    if (key === 'href' && (value != null ? value.startsWith('#') : void 0)) {
                    links.push({
                        anchor: value.slice(1),
                        lineNumber: child.lineNumber
                    });
                    }
                }
                break;
                case 'text':
                case 'code_inline':
                if (heading != null) {
                    heading += child.content;
                }
            }
            }
            break;
        case 'heading_open':
            heading = '';
            headingLineNumber = token.lineNumber;
            break;
        case 'heading_close':
            anchor = headingToAnchor(heading, headings);
            if (config.verbose) {
            console.log(name + ":" + headingLineNumber + " github-internal-links #" + anchor + " = " + heading);
            }
            heading = null;
        }
    }
    for (_l = 0, _len3 = links.length; _l < _len3; _l++) {
        _ref3 = links[_l], anchor = _ref3.anchor, lineNumber = _ref3.lineNumber;
        if (!(anchor in headings)) {
        onError({
            lineNumber: lineNumber,
            detail: 'Internal anchor link does not match any heading',
            context: "#" + anchor
        });
        } else if (config.verbose) {
        console.log(name + ":" + lineNumber + " github-internal-links Link #" + anchor + " OK");
        }
    }
    return void 0;
    }
};
